package com.huawei.systemmanager.antimal.ui;

import android.app.ActionBar;
import android.app.ActivityManagerNative;
import android.app.AlertDialog.Builder;
import android.app.Fragment;
import android.app.ProgressDialog;
import android.app.admin.DevicePolicyManager;
import android.content.ComponentName;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.pm.IPackageDeleteObserver.Stub;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.content.pm.PackageManager.NameNotFoundException;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.os.RemoteException;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.CompoundButton;
import android.widget.CompoundButton.OnCheckedChangeListener;
import android.widget.ListView;
import android.widget.RelativeLayout;
import android.widget.TextView;
import com.google.common.collect.Lists;
import com.huawei.android.app.ActionBarEx;
import com.huawei.systemmanager.R;
import com.huawei.systemmanager.antimal.AntiMalUtils;
import com.huawei.systemmanager.antimal.MalwareConst;
import com.huawei.systemmanager.hsmstat.HsmStat;
import com.huawei.systemmanager.hsmstat.base.HsmStatConst;
import com.huawei.systemmanager.hsmstat.base.HsmStatConst.Events;
import com.huawei.systemmanager.util.HwLog;
import java.util.Iterator;
import java.util.List;

public class MalwareAppListFragment extends Fragment {
    private static final String DEFAULT_HW_LAUNCHER = "com.huawei.android.launcher";
    private static final String IS_CHECK_NOTIFY = "is_check_notify";
    private static final int MSG_UNINSTALL_FINISH = 2;
    private static final int MSG_UNINSTALL_START = 1;
    private static final int SUCCESS = 1;
    private static final String TAG = "MalwareAppListFragment";
    private static final String UNINSTALL_APP_NUM = "uninstall_app_num";
    private static final String YES = "1";
    private boolean isUninstall = false;
    private MalwareAppListAdapter mAdapter;
    private List<String> mCheckedItemNameList = Lists.newArrayList();
    private Context mContext;
    private MenuItem mDeleteMenu;
    private View mDivider2View;
    private DevicePolicyManager mDpm;
    private Handler mHandler;
    private boolean mIsAllChecked;
    private List<String> mLauncherApps = Lists.newArrayList();
    private List<MalwareAppInfo> mMalwareAppInfoList = Lists.newArrayList();
    private ListView mMalwareAppListView;
    private TextView mOperatorView;
    private ProgressDialog mProgressDlg = null;
    private MenuItem mSelectAllMenu;
    private TextView mSelectedCountView;
    private TextView mTipTitleView;
    private List<String> mUnCheckedItemNameList = Lists.newArrayList();
    private int mUninstallAppNum;

    private class CheckBoxChangeListener implements OnCheckedChangeListener {
        private CheckBoxChangeListener() {
        }

        public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
            MalwareAppInfo info = (MalwareAppInfo) MalwareAppListFragment.this.mMalwareAppInfoList.get(((Integer) buttonView.getTag()).intValue());
            info.setIsChecked(isChecked);
            MalwareAppListFragment.this.remarkCheckedItem(isChecked, info.getPkgName());
            MalwareAppListFragment.this.mAdapter.swapData(MalwareAppListFragment.this.mMalwareAppInfoList);
            MalwareAppListFragment.this.updateCheckedNumber();
        }
    }

    private class ClearAppTask extends AsyncTask<Void, Void, Integer> {
        private ClearAppTask() {
        }

        protected Integer doInBackground(Void... param) {
            for (String pkg : MalwareAppListFragment.this.mCheckedItemNameList) {
                MalwareAppListFragment.this.uninstallApps(pkg);
            }
            return Integer.valueOf(1);
        }

        protected void onPostExecute(Integer result) {
        }
    }

    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        this.mContext = getActivity();
        Intent intent = getActivity().getIntent();
        if (intent != null) {
            Bundle bundle = intent.getExtras();
            if (bundle != null) {
                List<String> malwareAppPkg = (List) bundle.getSerializable(MalwareConst.PACKAGE_LIST);
                if (malwareAppPkg != null) {
                    HwLog.d(TAG, "malwareAppPkg != null and malwareAppPkg size is " + malwareAppPkg.size());
                    setMalAppStatus(malwareAppPkg);
                    this.mLauncherApps = AntiMalUtils.getLauncherApps(this.mContext, malwareAppPkg);
                } else {
                    HwLog.e(TAG, "Has none of malware apps");
                }
            }
        }
        if (this.mMalwareAppInfoList != null) {
            for (MalwareAppInfo info : this.mMalwareAppInfoList) {
                if (info.isChecked()) {
                    this.mCheckedItemNameList.add(info.getPkgName());
                }
            }
        }
        setHasOptionsMenu(true);
        this.mHandler = new Handler() {
            public void handleMessage(Message msg) {
                switch (msg.what) {
                    case 1:
                        MalwareAppListFragment.this.showWaitingDialog();
                        break;
                    case 2:
                        String pkgName = msg.obj;
                        if (pkgName != null) {
                            if (MalwareAppListFragment.this.mLauncherApps != null && MalwareAppListFragment.this.mLauncherApps.contains(pkgName)) {
                                MalwareAppListFragment.this.isUninstall = true;
                                String statParm = HsmStatConst.constructJsonParams(HsmStatConst.PARAM_UNINSTALL, "1");
                                HsmStat.statE((int) Events.E_ANTIMAL_UNINSTALL_LAUNCHER, statParm);
                                AntiMalUtils.setDone(MalwareAppListFragment.this.mContext);
                            }
                            MalwareAppListFragment.this.refreshViewsAfterClean(pkgName);
                            if (pkgName.equals(MalwareAppListFragment.this.mCheckedItemNameList.get(MalwareAppListFragment.this.mCheckedItemNameList.size() - 1))) {
                                MalwareAppListFragment.this.dismissProgressDialog();
                                MalwareAppListFragment.this.mCheckedItemNameList.clear();
                                break;
                            }
                        }
                        return;
                        break;
                }
            }
        };
        this.mDpm = (DevicePolicyManager) this.mContext.getSystemService("device_policy");
        setAlertResult(this.mContext, true);
        String statParam = HsmStatConst.constructJsonParams(IS_CHECK_NOTIFY, "1");
        HsmStat.statE((int) Events.E_ANTIMAL_ALERT_RESULT, statParam);
    }

    private void setAlertResult(Context context, boolean alerted) {
        context.getSharedPreferences(MalwareConst.ANTIMAL_ALERT_RESULT, 4).edit().putBoolean(MalwareConst.ALERT_RESULT, alerted).commit();
    }

    private void setMalAppStatus(List<String> appListPkg) {
        if (appListPkg != null) {
            PackageManager pm = getActivity().getPackageManager();
            for (String pkgName : appListPkg) {
                PackageInfo packageInfo;
                try {
                    packageInfo = pm.getPackageInfo(pkgName, 0);
                } catch (NameNotFoundException e) {
                    packageInfo = null;
                    HwLog.e(TAG, "not found " + pkgName);
                }
                if (packageInfo != null) {
                    MalwareAppInfo malwareAppInfo = new MalwareAppInfo();
                    malwareAppInfo.setIcon(packageInfo.applicationInfo.loadIcon(pm));
                    malwareAppInfo.setPkgTitle(packageInfo.applicationInfo.loadLabel(pm).toString());
                    malwareAppInfo.setPkgName(packageInfo.packageName);
                    malwareAppInfo.setIsChecked(true);
                    if (AntiMalUtils.isNowLauncher(this.mContext, pkgName)) {
                        malwareAppInfo.setIsRecommendClear(true);
                        malwareAppInfo.setHasFeature(true);
                        this.mMalwareAppInfoList.add(0, malwareAppInfo);
                    } else {
                        this.mMalwareAppInfoList.add(malwareAppInfo);
                    }
                }
            }
        }
    }

    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        initTitleView(inflater, container);
        View fragmentView = inflater.inflate(R.layout.malware_app_multi_select_list, container, false);
        initViewAndAdapter(fragmentView);
        return fragmentView;
    }

    private void initTitleView(LayoutInflater inflater, ViewGroup container) {
        RelativeLayout titleBarView = (RelativeLayout) inflater.inflate(R.layout.custom_actionbar_selecting, container, false);
        this.mOperatorView = (TextView) titleBarView.findViewById(R.id.view_title);
        this.mOperatorView.setText(getResources().getString(R.string.ActionBar_DoNotDisturb_Unselect));
        this.mSelectedCountView = (TextView) titleBarView.findViewById(R.id.view_selected_count);
        ActionBar actionBar = getActivity().getActionBar();
        if (actionBar != null) {
            actionBar.setDisplayHomeAsUpEnabled(false);
        }
        ActionBarEx.setCustomTitle(actionBar, titleBarView);
        ActionBarEx.setStartIcon(actionBar, true, null, new OnClickListener() {
            public void onClick(View arg0) {
                MalwareAppListFragment.this.getActivity().finish();
            }
        });
        HwLog.e(TAG, "initTitleView ");
        ActionBarEx.setEndIcon(actionBar, false, null, null);
    }

    private void initViewAndAdapter(View fragmentView) {
        this.mAdapter = new MalwareAppListAdapter(this.mContext, new CheckBoxChangeListener());
        this.mMalwareAppListView = (ListView) fragmentView.findViewById(R.id.malware_app_listview);
        this.mDivider2View = fragmentView.findViewById(R.id.dividerLine2);
        this.mTipTitleView = (TextView) fragmentView.findViewById(R.id.setting_title_textview);
        this.mMalwareAppListView.setAdapter(this.mAdapter);
        this.mAdapter.swapData(this.mMalwareAppInfoList);
        this.mMalwareAppListView.setItemsCanFocus(true);
    }

    public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
        inflater.inflate(R.menu.malware_clean_menu, menu);
    }

    public void onPrepareOptionsMenu(Menu menu) {
        super.onPrepareOptionsMenu(menu);
        this.mDeleteMenu = menu.findItem(R.id.delete_menu_item);
        this.mSelectAllMenu = menu.findItem(R.id.select_all);
        updateCheckedNumber();
    }

    public void onDestroy() {
        String statParam = HsmStatConst.constructJsonParams(UNINSTALL_APP_NUM, String.valueOf(this.mUninstallAppNum));
        HwLog.d(TAG, "mUninstallAppNum: " + this.mUninstallAppNum);
        HsmStat.statE((int) Events.E_ANTIMAL_ALERT_RESULT, statParam);
        if (this.mMalwareAppInfoList != null) {
            this.mMalwareAppInfoList.clear();
        }
        if (this.mCheckedItemNameList != null) {
            this.mCheckedItemNameList.clear();
        }
        if (this.mUnCheckedItemNameList != null) {
            this.mUnCheckedItemNameList.clear();
        }
        if (!this.isUninstall) {
            String statParm = HsmStatConst.constructJsonParams(HsmStatConst.PARAM_UNINSTALL, "0");
            HsmStat.statE((int) Events.E_ANTIMAL_UNINSTALL_LAUNCHER, statParm);
        }
        super.onDestroy();
    }

    public boolean onOptionsItemSelected(MenuItem item) {
        switch (item.getItemId()) {
            case R.id.select_all:
                boolean newCheckState = !this.mSelectAllMenu.isChecked();
                if (newCheckState) {
                    this.mCheckedItemNameList.addAll(this.mUnCheckedItemNameList);
                    this.mUnCheckedItemNameList.clear();
                } else {
                    this.mUnCheckedItemNameList.addAll(this.mCheckedItemNameList);
                    this.mCheckedItemNameList.clear();
                }
                updateAppCheckStateBatch(newCheckState);
                this.mAdapter.swapData(this.mMalwareAppInfoList);
                updateCheckedNumber();
                break;
            case R.id.delete_menu_item:
                HwLog.d(TAG, "delete_menu_item ");
                showUninstalledAppDialog();
                break;
        }
        return super.onOptionsItemSelected(item);
    }

    private void updateAppCheckStateBatch(boolean checkState) {
        for (MalwareAppInfo info : this.mMalwareAppInfoList) {
            info.setIsChecked(checkState);
        }
    }

    private void refreshViewsAfterClean(String pkgName) {
        Iterator<MalwareAppInfo> it = this.mMalwareAppInfoList.iterator();
        while (it.hasNext()) {
            if (((MalwareAppInfo) it.next()).getPkgName().equals(pkgName)) {
                it.remove();
            }
        }
        this.mAdapter.swapData(this.mMalwareAppInfoList);
        updateCheckedNumber();
    }

    private void updateAllViews() {
        if (this.mMalwareAppInfoList.size() == 0) {
            getActivity().finish();
            return;
        }
        this.mDivider2View.setVisibility(0);
        this.mMalwareAppListView.setVisibility(0);
        this.mTipTitleView.setVisibility(0);
    }

    private void updateCheckedNumber() {
        int number = getCheckedNumer();
        HwLog.d(TAG, "the check Number = " + number);
        this.mIsAllChecked = isAllItemChecked(number);
        updateAllViews();
        if (number > 0) {
            this.mOperatorView.setText(R.string.ActionBar_DoNotDisturb_Select);
            this.mSelectedCountView.setVisibility(0);
            this.mSelectedCountView.setText(String.valueOf(number));
            this.mDeleteMenu.setEnabled(true);
        } else {
            this.mOperatorView.setText(R.string.ActionBar_DoNotDisturb_Unselect);
            this.mSelectedCountView.setVisibility(8);
            this.mDeleteMenu.setEnabled(false);
        }
        if (number == 0 || !this.mIsAllChecked) {
            this.mSelectAllMenu.setIcon(R.drawable.menu_check_status);
            this.mSelectAllMenu.setTitle(R.string.select_all);
            this.mSelectAllMenu.setChecked(false);
            return;
        }
        this.mSelectAllMenu.setIcon(R.drawable.menu_check_pressed);
        this.mSelectAllMenu.setTitle(R.string.unselect_all);
        this.mSelectAllMenu.setChecked(true);
    }

    private int getCheckedNumer() {
        int total = 0;
        if (this.mMalwareAppInfoList != null) {
            for (MalwareAppInfo data : this.mMalwareAppInfoList) {
                if (data.isChecked()) {
                    total++;
                }
            }
        }
        return total;
    }

    private boolean isAllItemChecked(int num) {
        return num == this.mMalwareAppInfoList.size();
    }

    private void remarkCheckedItem(boolean isChecked, String packageName) {
        if (isChecked) {
            if (!this.mCheckedItemNameList.contains(packageName)) {
                this.mCheckedItemNameList.add(packageName);
            }
            this.mUnCheckedItemNameList.remove(packageName);
            return;
        }
        this.mCheckedItemNameList.remove(packageName);
        if (!this.mUnCheckedItemNameList.contains(packageName)) {
            this.mUnCheckedItemNameList.add(packageName);
        }
    }

    private void uninstallApps(String pkgName) {
        HwLog.i(TAG, "uninstallApps");
        if (pkgName != null) {
            if (this.mDpm.packageHasActiveAdmins(pkgName)) {
                try {
                    ActivityManagerNative.getDefault().resumeAppSwitches();
                    ComponentName cn = getCurrentComponent(pkgName);
                    if (cn != null) {
                        this.mDpm.removeActiveAdmin(cn);
                    }
                } catch (RemoteException e) {
                    HwLog.d(TAG, "remove Active admin has some errors");
                }
            }
            try {
                this.mContext.getPackageManager().deletePackage(pkgName, new Stub() {
                    public void packageDeleted(String s, int i) throws RemoteException {
                        HwLog.d(MalwareAppListFragment.TAG, "End  delete app cache trash, pkg:" + s);
                        if (MalwareAppListFragment.this.mCheckedItemNameList.contains(s)) {
                            MalwareAppListFragment malwareAppListFragment = MalwareAppListFragment.this;
                            malwareAppListFragment.mUninstallAppNum = malwareAppListFragment.mUninstallAppNum + 1;
                            Message msg = Message.obtain();
                            msg.what = 2;
                            msg.obj = s;
                            MalwareAppListFragment.this.mHandler.sendMessage(msg);
                        }
                    }

                    public void packageDeleted(boolean b) {
                    }
                }, 0);
            } catch (Exception e2) {
                HwLog.i(TAG, "delete package failed!");
            }
        }
    }

    private void showUninstalledAppDialog() {
        HwLog.i(TAG, "showUninstalledAppDialog start");
        int checkedNum = getCheckedNumer();
        String uninstallTitle = this.mContext.getResources().getQuantityString(R.plurals.space_clean_any_app_uninstall_title, checkedNum, new Object[]{Integer.valueOf(checkedNum)});
        Builder build = new Builder(this.mContext);
        build.setTitle(uninstallTitle);
        build.setPositiveButton(R.string.common_uninstall, new DialogInterface.OnClickListener() {
            public void onClick(DialogInterface dialog, int which) {
                MalwareAppListFragment.this.mHandler.sendEmptyMessage(1);
                new ClearAppTask().execute(new Void[0]);
            }
        });
        build.setNegativeButton(R.string.cancel, null);
        build.create().show();
    }

    private void showWaitingDialog() {
        if (this.mProgressDlg != null) {
            this.mProgressDlg.dismiss();
        }
        if (getActivity() != null) {
            this.mProgressDlg = ProgressDialog.show(getActivity(), "", this.mContext.getResources().getString(R.string.uninstalling), true, true);
            this.mProgressDlg.setCanceledOnTouchOutside(false);
        }
    }

    private void dismissProgressDialog() {
        if (this.mProgressDlg != null && this.mProgressDlg.isShowing()) {
            this.mProgressDlg.dismiss();
            this.mProgressDlg = null;
        }
    }

    private ComponentName getCurrentComponent(String packageName) {
        List<ComponentName> listCompName = this.mDpm.getActiveAdmins();
        if (listCompName == null) {
            return null;
        }
        for (ComponentName i : listCompName) {
            if (i.getPackageName().equals(packageName)) {
                return i;
            }
        }
        return null;
    }
}
